// <auto-generated />
using System;
using Data_and_Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_and_Models.Migrations
{
    [DbContext(typeof(BloodPressureContext))]
    partial class BloodPressureContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Data_and_Models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Diastolic")
                        .HasColumnType("int");

                    b.Property<string>("PatientSSN")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Seen")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Systolic")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientSSN");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Data_and_Models.Patient", b =>
                {
                    b.Property<string>("SSN")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SSN");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Data_and_Models.Measurement", b =>
                {
                    b.HasOne("Data_and_Models.Patient", "Patient")
                        .WithMany("Measurements")
                        .HasForeignKey("PatientSSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Data_and_Models.Patient", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
